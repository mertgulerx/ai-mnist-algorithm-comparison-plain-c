import os

import matplotlib.pyplot as plt


# Veriler
epochs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
test_steps = [0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700]
train_loss_gd = [0.53157, 0.38534, 0.30085, 0.24744, 0.21043, 0.18301, 0.16181, 0.14494, 0.13124, 0.11996, 0.11055, 0.10261, 0.09583, 0.09000, 0.08494, 0.08051, 0.07660, 0.07313, 0.07003, 0.06725, 0.06473]
train_loss_sgd = [0.53157, 0.14355, 0.04299, 0.03768, 0.02524, 0.03077, 0.01966, 0.01922, 0.01874, 0.02096, 0.01849, 0.01612, 0.01586, 0.01547, 0.01512, 0.01829, 0.02387, 0.01649, 0.01276, 0.01291, 0.01909]
train_loss_adam = [0.53157, 0.06521, 0.03221, 0.02141, 0.02008, 0.01601, 0.01945, 0.02237, 0.01718, 0.01812, 0.01448, 0.01375, 0.01608, 0.02037, 0.01244, 0.01303, 0.01533, 0.00751, 0.01263, 0.02398, 0.01519]
train_accuracy_gd = [0.00000, 46.73851, 46.73851, 47.27737, 53.11968, 62.57799, 70.68916, 77.77935, 83.09699, 86.88316, 89.50652, 91.64776, 92.89563, 94.15768, 94.89507, 95.61826, 96.08622, 96.49744, 96.80942, 96.97958, 97.26319]
train_accuracy_sgd = [0.00000, 84.37500, 97.26563, 98.04688, 99.60938, 98.04688, 99.21875, 98.82813, 99.60938, 99.21875, 99.21875, 99.60938, 99.21875, 99.60938, 99.60938, 98.82813, 97.26563, 99.60938, 99.60938, 100.00000, 98.43750]
train_accuracy_adam = [0.00000, 94.92188, 99.21875, 99.60938, 98.82813, 99.60938, 99.21875, 99.21875, 99.60938, 99.60938, 100.00000, 99.21875, 99.21875, 98.43750, 99.60938, 99.60938, 98.82813, 100.00000, 100.00000, 98.43750, 100.00000]
train_time_gd = [0.00000, 0.08976, 0.16638, 0.25591, 0.33980, 0.43317, 0.52230, 0.61234, 0.70425, 0.78535, 0.88330, 0.97178, 1.04796, 1.14334, 1.23506, 1.31002, 1.40080, 1.49359, 1.58649, 1.67295, 1.75618]
train_time_sgd = [0.00000, 0.01186, 0.01698, 0.01981, 0.02385, 0.02563, 0.03051, 0.03441, 0.03742, 0.04170, 0.04438, 0.04776, 0.05093, 0.05406, 0.05794, 0.05924, 0.06501, 0.06908, 0.07211, 0.07614, 0.07815]
train_time_adam = [0.00000, 0.04162, 0.08533, 0.12690, 0.16912, 0.20858, 0.25375, 0.29767, 0.34130, 0.38389, 0.42696, 0.46987, 0.51126, 0.55578, 0.59839, 0.64157, 0.68440, 0.72700, 0.77011, 0.81155, 0.85390]
test_loss_gd = [0.00000, 0.01980, 0.01990, 0.01993, 0.02494, 0.01996, 0.02163, 0.02568, 0.02747, 0.02442, 0.02298, 0.02089, 0.02498, 0.02460, 0.02498, 0.02665, 0.02623, 0.02587]
test_loss_sgd = [0.00000, 0.00000, 0.00498, 0.00997, 0.00998, 0.00798, 0.00666, 0.00856, 0.00749, 0.00777, 0.00699, 0.00636, 0.00916, 0.00922, 0.00857, 0.00799, 0.00812, 0.00823]
test_loss_adam = [0.00000, 0.00990, 0.01990, 0.01661, 0.01496, 0.01796, 0.01664, 0.01712, 0.01623, 0.01554, 0.01499, 0.01362, 0.01749, 0.01768, 0.01784, 0.01666, 0.01749, 0.01705]
test_accuracy_gd = [100.00000, 98.01980, 98.00995, 98.00665, 97.50623, 98.00399, 97.83694, 97.43224, 97.25343, 97.55827, 97.70230, 97.91099, 97.50208, 97.54035, 97.50179, 97.33511, 97.37664, 97.41328]
test_accuracy_sgd = [100.00000, 100.00000, 99.50249, 99.00332, 99.00249, 99.20160, 99.33444, 99.14408, 99.25094, 99.22308, 99.30070, 99.36421, 99.08410, 99.07763, 99.14347, 99.20053, 99.18801, 99.17696]
test_accuracy_adam = [100.00000, 99.00990, 98.00995, 98.33887, 98.50374, 98.20359, 98.33611, 98.28816, 98.37703, 98.44617, 98.50150, 98.63760, 98.25146, 98.23213, 98.21556, 98.33444, 98.25109, 98.29512]
test_times = [0.00000, 0.00000, 0.00000, 0.00460, 0.00460, 0.00609, 0.00609, 0.00757, 0.00757, 0.00757, 0.00757, 0.01008, 0.01008, 0.01173, 0.01173, 0.01173, 0.01173, 0.01453]
weight_range = 0.001
batch_size = 256




output_folder = "train_loss_epoch"

os.makedirs(output_folder, exist_ok=True)


# Grafik boyutunu ayarlama
plt.figure(figsize=(8, 8))

# Grafik için veriler
plt.plot(epochs, train_loss_gd, label='GD', color='blue', marker='o')
plt.plot(epochs, train_loss_sgd, label='SGD', color='green', marker='o')
plt.plot(epochs, train_loss_adam, label='Adam', color='red', marker='o')

# Grafik başlıkları ve etiketler
plt.title(f'Train Loss vs Epoch with Weight Initialization in Range [-{weight_range}, {weight_range}]\nBatch size for ADAM and SGD = {batch_size}')
plt.xlabel('Epoch')
plt.ylabel('Loss')

# Legenda eklemek
plt.legend()

plt.grid(True)

# Grafiği kaydetmek
file_path = os.path.join(output_folder, f'loss_vs_epochs_weight_range_{weight_range}.png')

# Grafiği kaydet
plt.savefig(file_path)

# Grafiği göstermek
plt.show()

